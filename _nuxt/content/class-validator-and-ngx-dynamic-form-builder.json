{
  "title": "class-validator & ngx-dynamic-form-builder",
  "meta": {
<<<<<<< HEAD
    "index": 2,
=======
    "index": 0,
>>>>>>> 4bf885389dd76927c00bba5b56f540904693cab5
    "fileName": "2020-03-13-classValidatorAndNgxDynamicFormBuilder.md",
    "section": "/",
    "dirName": "/"
  },
  "date": "2020-03-13",
  "path": "/class-validator-and-ngx-dynamic-form-builder",
  "permalink": "/class-validator-and-ngx-dynamic-form-builder",
  "anchors": [],
  "body": "<p>資料驗證是常常碰到的議題，一般說來，前端及後端都要驗證，但常常是前端驗證要寫一套，後端又要寫另一套，不太能共用。JavaScript的世界也是如此，都會做重工。之前發現套件<a href=\"https://github.com/typestack/class-validator\">class-validator</a>，使用decorator來設定要驗證的項目，並且是用Angular的話，搭配使用ngx-dynamic-form-builder即可進行表單驗證，而在node.js也可使用。</p>\n<h2>class-validator</h2>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  IsNotEmpty<span class=\"token punctuation\">,</span>\n  IsEmail<span class=\"token punctuation\">,</span>\n  IsMobilePhone<span class=\"token punctuation\">,</span>\n  Matches<span class=\"token punctuation\">,</span>\n  MinLength<span class=\"token punctuation\">,</span>\n  MaxLength\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'class-validator'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">IsNotEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token string\">'姓名需填寫'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  @<span class=\"token function\">IsNotEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token string\">'Email需填寫'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  @<span class=\"token function\">IsEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  email <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  @<span class=\"token function\">IsNotEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token string\">'手機需填寫'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  @<span class=\"token function\">IsMobilePhone</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zh-TW'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token string\">'手機需填寫'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  mobile <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  @<span class=\"token function\">IsNotEmpty</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n  @<span class=\"token function\">MinLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  @<span class=\"token function\">MaxLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  @<span class=\"token function\">Matches</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[a-zA-Z\\d]/g</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n  account <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>使用方式很簡單、直覺，在class上設定decorator即可。可以使用的decorator可以參考<a href=\"https://github.com/typestack/class-validator#validation-decorators\">文件</a>。並且後面可以傳入參數，來自定錯誤訊息。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> validateOrReject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'class-validator'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">validateOrReject</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> ret <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> memberService<span class=\"token punctuation\">.</span><span class=\"token function\">saveMember</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">errors:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>需要驗證資料時呼叫<code>validateOrReject</code>，因為是非同步的所以搭配await使用，如果有失敗時，在catch中抓取錯誤訊息。</p>\n<h2>ngx-dynamic-form-builder</h2>\n<p>而<a href=\"https://github.com/EndyKaufman/ngx-dynamic-form-builder\">ngx-dynamic-form-builder</a>這個套件可以將class-validator整合進Angular。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">  group<span class=\"token operator\">:</span> DynamicFormGroup<span class=\"token operator\">&lt;</span>Member<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\"><span class=\"token keyword\">private</span> fb<span class=\"token operator\">:</span> DynamicFormBuilder<span class=\"token punctuation\">,</span></span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fb<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span>Member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>基於Reactive forms的方式開發，會需要用到<code>FormBuilder</code>及<code>FormGroup</code>這兩個物件，而ngx-dynamic-form-builder有<code>DynamicFormGroup</code>及<code>DynamicFormBuilder</code>這兩個物件，可以來建立我們的form。</p>\n<p>使用<code>DynamicFormBuilder</code>的<code>Group</code>方法來產生<code>DynamicFormGroup</code>，並且參數傳入Model類別。</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span>\n    <span class=\"token attr-name\">[formGroup]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>group<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>group?.customValidateErrors | async as errors<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">(ngSubmit)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>onSubmit()<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">#form</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ngForm<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-group<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>memberName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>姓名<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>memberName<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">formControlName</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token punctuation\">/></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>small</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text-danger<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">*ngIf</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>errors.name?.length > 0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        {{ errors.name[0] }}\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>small</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>顯示錯誤訊息的方式，使用<code>customValidationError</code>屬性，因為型別是BehavioraSubject，所以這邊先用async處理，之後<code>errors.name[0]</code>顯示錯誤訊息。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">onSubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">.</span>valid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memberService<span class=\"token punctuation\">.</span><span class=\"token function\">saveMember</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>snackBar<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'儲存成功'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          duration<span class=\"token operator\">:</span> <span class=\"token number\">3000</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最後儲存資料的階段，使用<code>validate</code>來驗證資料，<code>valid</code>判斷資料是否正確，<code>object</code>取回model物件。</p>\n<h2>結論</h2>\n<p>只需使用class-validator就可以讓前端及後端採用相同的驗證方式，讓程式不用為了驗證重覆再寫一次，並且搭配ngx-dynamic-form-builder後，可以輕易地整合至Angular。</p>\n<p>範例程式碼如下<a href=\"https://github.com/thomascsd/form-builder-demo\">form-builder-demo</a>。</p>\n"
}