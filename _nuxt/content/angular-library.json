{
  "title": "6個推薦的Angular Library",
  "bgImageUrl": "/images/15/15-0.jpg",
  "meta": {
    "index": 1,
    "fileName": "2020-07-05-AngularLibrary.md",
    "section": "/",
    "dirName": "/"
  },
  "date": "2020-07-05",
  "path": "/angular-library",
  "permalink": "/angular-library",
  "anchors": [],
  "body": "<p>除了一些有名的Library之外，例如：Angular material、，還有一些不為人知的Library，我平常都會對有興趣的Angular Library，加上星星加以儲藏，其中有使用過，有些覺得很不錯的想推薦給大家。</p>\n<h2>1. <a href=\"https://github.com/Zak-C/ngx-loading\">ngx-loading</a></h2>\n<img class=\"img-responsive\" src=\"/images/15/15-1.gif\"/>\n<p>一般常常會和後端用Ajax溝通，這時候為了向使用者顯示還在資料處理中，會需要用Loading呈現。\n發現<a href=\"https://github.com/Zak-C/ngx-loading\">ngx-loading</a>這個library，方便設定及有各種的樣式。</p>\n<iframe width=\"100%\" height=\"450\" frameborder=\"0\" src=\"https://stackblitz.com/edit/ngx-loading-blog?embed=1&file=src/app/app.component.html\" ></iframe>\n<h2>2. <a href=\"https://github.com/sweetalert2/ngx-sweetalert2\">ngx-sweetalert2</a></h2>\n<p>要顯示alert或是confirm時，會有蠻多人推薦使用sweetalert2，在Angular中可以使用<a href=\"https://github.com/sweetalert2/ngx-sweetalert2\">ngx-sweetalert2</a>，將Angular與sweetalert2整合。</p>\n<iframe width=\"100%\" height=\"450\" frameborder=\"0\" src=\"https://stackblitz.com/edit/ngx-sweetalert2-blog?embed=1&file=src/app/app.component.html\" ></iframe>\n<h2>3.<a href=\"https://github.com/ng-select/ng-select\">ng-select</a></h2>\n<p>我覺是目前最好用的取代select的Libaray，有很多功能，例如：多選、自動完成、標韱的輸入。</p>\n<iframe width=\"100%\" height=\"450\" frameborder=\"0\" src=\"https://stackblitz.com/edit/ngx-select-blog?embed=1&file=src/app/app.component.html\" ></iframe>\n<h2>4. <a href=\"https://github.com/maximelafarie/ngx-smart-modal\">ngx-smart-modal</a></h2>\n<img class=\"img-responsive\" src=\"/images/15/15-2.png\">\n<p>說到Dialog，除了使用Angular component的<a href=\"https://material.angular.io/components/dialog/overview\">Dialog</a>之外，還可以使用<a href=\"https://github.com/maximelafarie/ngx-smart-modal\">ngx-smart-modal</a>，除了一般的之外，還有巢狀Dialog的功能，有時候我們會需要開啟Dialog後，再開啟另一個Dialog，除此之外，滿足了使用Dialog的各項功能需求。</p>\n<iframe width=\"100%\" height=\"450\" frameborder=\"0\" src=\"https://stackblitz.com/edit/ngx-smart-dialog-blog?embed=1&file=src/app/app.component.html\" ></iframe>\n<h2>5.<a href=\"https://github.com/ngneat/until-destroy\">until-destroy</a></h2>\n<p>一般說來，在component中，有對Observable進行subcribe的話，都會需要在ngOnDestroy中執行unsubscribe。如果有很多component的話，每個都要這麼寫，卻時很煩人，所以我有發現<a href=\"https://github.com/ngneat/until-destroy\">until-destroy</a>，可以簡化需撰寫的程式碼。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UntilDestroy<span class=\"token punctuation\">,</span> untilDestroyed <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@ngneat/until-destroy\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CityService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../city.service\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> City <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../models/City\"</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">UntilDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">\"app-home\"</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token operator\">:</span> <span class=\"token string\">\"./home.component.html\"</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./home.component.css\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HomeComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnInit</span> <span class=\"token punctuation\">{</span>\n  cities<span class=\"token operator\">:</span> City<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">private</span> cityService<span class=\"token operator\">:</span> CityService</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cityService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getCities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">untilDestroyed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cities <span class=\"token operator\">=</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>如同上方的程式，只需引用UntilDestroy、untilDestroyed，不需在另外加上Subject或是ngOnDestroy之類的程式。</p>\n<h2>6.<a href=\"https://github.com/EndyKaufman/ngx-dynamic-form-builder\">ngx-dynamic-form-builder</a></h2>\n<p><a href=\"https://github.com/EndyKaufman/ngx-dynamic-form-builder\">ngx-dynamic-form-builder</a>是將class-valdator整合的Angular library， 而class-validator則是驗證用的Library，使用decorator設定資料驗證的規則。</p>\n<p>我在上一篇的<a href=\"/class-validator-and-ngx-dynamic-form-builder\">文章</a>有介紹過。</p>\n<h2>結論</h2>\n<p>以上6個Angular Library，除了<a href=\"https://github.com/ng-select/ng-select\">ng-select</a>外，其他的星星數都不是很多，但是卻很實用，推薦給大家參考看看。</p>\n"
}